// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package gensql

import (
	"context"
)

const userAppInsert = `-- name: UserAppInsert :exec
INSERT INTO users ("email", "team", "chart_type")
VALUES ($1, $2, $3)
`

type UserAppInsertParams struct {
	Email     string
	Team      string
	ChartType ChartType
}

func (q *Queries) UserAppInsert(ctx context.Context, arg UserAppInsertParams) error {
	_, err := q.db.ExecContext(ctx, userAppInsert, arg.Email, arg.Team, arg.ChartType)
	return err
}

const userAppSetReady = `-- name: UserAppSetReady :exec
UPDATE users
SET ready = $1
WHERE team = $2
`

type UserAppSetReadyParams struct {
	Ready bool
	Team  string
}

func (q *Queries) UserAppSetReady(ctx context.Context, arg UserAppSetReadyParams) error {
	_, err := q.db.ExecContext(ctx, userAppSetReady, arg.Ready, arg.Team)
	return err
}

const userAppsGet = `-- name: UserAppsGet :many
SELECT team, chart_type
FROM users
where email = $1
`

type UserAppsGetRow struct {
	Team      string
	ChartType ChartType
}

func (q *Queries) UserAppsGet(ctx context.Context, email string) ([]UserAppsGetRow, error) {
	rows, err := q.db.QueryContext(ctx, userAppsGet, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAppsGetRow
	for rows.Next() {
		var i UserAppsGetRow
		if err := rows.Scan(&i.Team, &i.ChartType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
